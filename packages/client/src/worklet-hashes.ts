// This file is auto-generated by scripts/generate-worklet-hashes.js
// Do not edit manually

/**
 * CSP hashes for AudioWorklet source code
 * Add these to your Content Security Policy script-src directive for CSP-safe static file loading
 */
export const WORKLET_HASHES = {
  "audio-concat-processor": "sha256-7XwSCu/JjsIGhjK+X2oXBeE26icLH2yc68n0OkeGlRs=",
  "raw-audio-processor": "sha256-nNc4EV6CoBdgG6gRpdDxYJ0lneoWKP3GuUGZT1iuBZE="
} as const;

/**
 * Array of all worklet hashes for easy CSP configuration
 * Example CSP: script-src 'self' 'sha256-7XwSCu/JjsIGhjK+X2oXBeE26icLH2yc68n0OkeGlRs=' 'sha256-nNc4EV6CoBdgG6gRpdDxYJ0lneoWKP3GuUGZT1iuBZE=';
 */
export const WORKLET_HASH_LIST = [
  "sha256-7XwSCu/JjsIGhjK+X2oXBeE26icLH2yc68n0OkeGlRs=",
  "sha256-nNc4EV6CoBdgG6gRpdDxYJ0lneoWKP3GuUGZT1iuBZE="
] as const;

/**
 * Generate a CSP-compatible script-src directive that includes worklet hashes
 * @param additionalSources Additional sources to include (e.g., 'self', 'unsafe-inline')
 * @returns CSP script-src directive string
 */
export function generateScriptSrcDirective(additionalSources: string[] = ["'self'"]): string {
  const sources = [...additionalSources, ...WORKLET_HASH_LIST.map(hash => `'${hash}'`)];
  return `script-src ${sources.join(' ')}`;
}
