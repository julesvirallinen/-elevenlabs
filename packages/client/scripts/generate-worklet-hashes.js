#!/usr/bin/env node

/**
 * Script to generate CSP hashes for AudioWorklet files
 * Run this script before building to generate the hash file
 */

import { createHash } from 'crypto';
import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const packagesDir = join(__dirname, '..');
const workletDir = join(packagesDir, 'src', 'worklets');

// Worklet files to process
const workletFiles = [
  {
    name: 'audio-concat-processor',
    path: join(workletDir, 'audio-concat-processor.worklet.js')
  },
  {
    name: 'raw-audio-processor', 
    path: join(workletDir, 'raw-audio-processor.worklet.js')
  }
];

// Read worklet source code from actual files
const workletSources = {};
for (const worklet of workletFiles) {
  try {
    const content = readFileSync(worklet.path, 'utf8');
    workletSources[worklet.name] = content;
  } catch (error) {
    console.error(`Error reading ${worklet.name}:`, error.message);
    process.exit(1);
  }
}

// Generate SHA-256 hashes
const hashes = {};
const hashList = [];

console.log('Generating CSP hashes for AudioWorklet source code...\n');

for (const [name, sourceCode] of Object.entries(workletSources)) {
  const hash = createHash('sha256').update(sourceCode, 'utf8').digest('base64');
  const cspHash = `sha256-${hash}`;
  
  hashes[name] = cspHash;
  hashList.push(cspHash);
  
  console.log(`${name}: ${cspHash}`);
}

// Generate TypeScript file with hashes and source code
const tsContent = `// This file is auto-generated by scripts/generate-worklet-hashes.js
// Do not edit manually

/**
 * CSP hashes for AudioWorklet source code
 * Add these to your Content Security Policy script-src directive for CSP-safe static file loading
 */
export const WORKLET_HASHES = ${JSON.stringify(hashes, null, 2)} as const;

/**
 * AudioWorklet source code for fallback blob: URL usage
 */
export const WORKLET_SOURCES = ${JSON.stringify(workletSources, null, 2)} as const;

/**
 * Array of all worklet hashes for easy CSP configuration
 * Example CSP: script-src 'self' ${hashList.map(h => `'${h}'`).join(' ')};
 */
export const WORKLET_HASH_LIST = ${JSON.stringify(hashList, null, 2)} as const;

/**
 * Generate a CSP-compatible script-src directive that includes worklet hashes
 * @param additionalSources Additional sources to include (e.g., 'self', 'unsafe-inline')
 * @returns CSP script-src directive string
 */
export function generateScriptSrcDirective(additionalSources: string[] = ["'self'"]): string {
  const sources = [...additionalSources, ...WORKLET_HASH_LIST.map(hash => \`'\${hash}'\`)];
  return \`script-src \${sources.join(' ')}\`;
}
`;

const outputPath = join(packagesDir, 'src', 'worklet-hashes.ts');
writeFileSync(outputPath, tsContent, 'utf8');

console.log(`\nâœ… Generated worklet hashes file: ${outputPath}`);
console.log('\nðŸ“‹ For CSP-safe static file loading, add these hashes to script-src:');
console.log(`   ${hashList.map(h => `'${h}'`).join(' ')}`);
console.log('\nðŸ’¡ Or use the helper function:');
console.log('   import { generateScriptSrcDirective } from "@elevenlabs/client";');
console.log('   const csp = generateScriptSrcDirective();');
